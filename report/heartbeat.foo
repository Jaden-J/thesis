// each algorithm is contained in a single module
module heartbeat

// basic constants, types are inferred
const heartbeat_interval     = 3000    // 3 sec
const validation_interval    = 5000
const max_fail_count         =    3

// imports external functionality
// requires type information
from crypto import sha1(byte*)            : byte[20]
from crypto import sha1_cmp(byte*, byte*) : boolean
from time   import now()                  : timestamp

// nodes can be extended with module specific data
extend nodes with {
  sequence   : byte      = 0
  last_seen  : timestamp = now()
  fail_count : byte      = 0
  trust      : boolean   = true
}

// event handler when receiving data
after nodes receive
do function(me, sender, from, hop, to, payload) {
  case payload {   // payload is a list of bytes
    // an atom and three variables following it
    contains( [ #heartbeat, time:timestamp, sequence,
                signature:byte[20] ] )
    {
      // skip our own or from untrusted
      if(from == me or !from.trust) { return }

      // validate signature
      if(sha1_cmp(signature, [sequence, time])) {
        from.last_seen = time
        from.sequence  = sequence
      } else {
        from.fail_count++
      }
    }
  }
}

// validate nodes using function at a given interval
@every(validation_interval)
with nodes do function(node) {
  // check time that passed since the last heartbeat
  if(now() - node.last_seen > max_last_seen_interval) {
    // the heartbeat is late, track this incident
    node.fail_count++
  }

  // check number of failures doesn't exceed our limit
  if( node.fail_count > max_fail_count ) {
    node.trust = false
  }
}

// function to construct and broadcast a heartbeat
function broadcast_heartbeat(node) {
  time = now()
  nodes.broadcast([ #heartbeat, node.sequence, time,
                   sha1([node.sequence,time]) ])
  node.sequence++
}

// broadcast a heartbeat at every heartbeat interval
@every(heartbeat_interval)
with nodes.self do broadcast_heartbeat